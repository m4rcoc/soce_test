// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');

'use strict';

let jsonData = require('../constants.json');


function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

(async function example() {

  var webVersion = "new"
  let driver = await new Builder().forBrowser('firefox').build();
  try {
    await driver.get("http://"+jsonData.user_basic+":"+jsonData.pass_basic+"@"+jsonData.ip+"/")
    
    //await sleep(10000)
    
    await driver.wait(until.elementLocated(By.xpath("/html/body/div/header/nav/div/ul/li[3]")),10000).click()
    await driver.wait(until.elementLocated(By.xpath("//ul[@id='lefter']/span/li[2]/a/span/b")),10000).click()
    await driver.wait(until.elementLocated(By.xpath("//ul[@id='lefter']/span/li[2]/a/span/b")),10000).click()
    //ponermos el PVID en el J1A
    await driver.wait(until.elementLocated(By.xpath("//table[@id='table_vlanPortConfig_SWITCH']/tbody/tr[2]/td[2]/input")),10000).click()
    await driver.wait(until.elementLocated(By.xpath("//table[@id='table_vlanPortConfig_SWITCH']/tbody/tr[2]/td[2]/input")),10000).clear()
    await driver.wait(until.elementLocated(By.xpath("//table[@id='table_vlanPortConfig_SWITCH']/tbody/tr[2]/td[2]/input")),10000).sendKeys("1")
    //ponemos el Porttype en el J1A

    await (await driver.wait(until.elementLocated(By.id("portType")),20000)).click()
    {
      const dropdown = await driver.findElement(By.id("portType"))
      await dropdown.findElement(By.xpath(" /html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[2]/td[5]/select/option[2]")).click() //seleccionamos TAP
    }
    /*
     //ponemos el Acceptable frame types en el J1A

     await (await driver.wait(until.elementLocated(By.id("ingressFiltering")),20000)).click()
     {
       const dropdown = await driver.findElement(By.id("ingressFiltering"))
       await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[2]/td[7]/select/option[3]")).click() //seleccionamos TAP
     }
    //ponemos el ingress filtering en el J1A

    await (await driver.wait(until.elementLocated(By.id("acceptableFrameTypes")),20000)).click()
    {
      const dropdown = await driver.findElement(By.id("acceptableFrameTypes"))
      await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[2]/td[6]/select/option[2]")).click() //seleccionamos TAP
    }
    //ponemos el egress tagging mode en el J1A

    await (await driver.wait(until.elementLocated(By.id("egressTaggingMode")),20000)).click()
    {
      const dropdown = await driver.findElement(By.id("egressTaggingMode"))
      await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[2]/td[8]/select/option[5]")).click() //seleccionamos TAP
    }
    //ponemos el Priority tagged egress mode mode en el J1A
    
    await (await driver.wait(until.elementLocated(By.id("priorityTaggedEgressMode")),20000)).click()
    {
      const dropdown = await driver.findElement(By.id("priorityTaggedEgressMode"))
      await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[2]/td[9]/select/option[2]")).click() //seleccionamos TAP
    }

    //ponemos el hybrid port tyep mode mode en el J1A
    
    await (await driver.wait(until.elementLocated(By.id("hybridPortType")),20000)).click()
    {
      const dropdown = await driver.findElement(By.id("hybridPortType"))
      await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[2]/td[10]/select/option[3]")).click() //seleccionamos TAP
    }

*/
    
    //ponermos el PVID en el J1B
    await driver.wait(until.elementLocated(By.xpath("//table[@id='table_vlanPortConfig_SWITCH']/tbody/tr[3]/td[2]/input")),10000).click()
    await driver.wait(until.elementLocated(By.xpath("//table[@id='table_vlanPortConfig_SWITCH']/tbody/tr[3]/td[2]/input")),10000).clear()
    await driver.wait(until.elementLocated(By.xpath("//table[@id='table_vlanPortConfig_SWITCH']/tbody/tr[3]/td[2]/input")),10000).sendKeys("1")
    //ponemos el Porttype en el J1B
    
    await (await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[5]")),20000)).click()
    {
    const dropdown = await driver.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[5]"))
    await dropdown.findElement(By.xpath(" /html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[5]/select/option[2]")).click() //seleccionamos TAP
    }

    //ponemos el Acceptable frame types en el J1A
    /*

    await (await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[7]")),20000)).click()
    {
    const dropdown = await driver.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[7]"))
    await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[7]/select/option[3]")).click() //seleccionamos TAP
    }
    //ponemos el ingress filtering en el J1A
    /*
    await (await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[6]")),20000)).click()
    {
    const dropdown = await driver.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[6]"))
    await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[6]/select/option[2]")).click() //seleccionamos TAP
    }
    */
    //ponemos el egress tagging mode en el J1A
    /*
    await (await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[8]")),20000)).click()
    {
    const dropdown = await driver.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[8]"))
    await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[8]/select/option[3]")).click() //seleccionamos TAP
    }
    //ponemos el Priority tagged egress mode mode en el J1A

    await (await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[9]")),20000)).click()
    {
    const dropdown = await driver.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[9]"))
    await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[9]/select/option[2]")).click() //seleccionamos TAP
    }

    //ponemos el hybrid port tyep mode mode en el J1A
    /*
    await (await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[10]")),20000)).click()
    {
    const dropdown = await driver.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[10]"))
    await dropdown.findElement(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[1]/div/div[2]/div/table/tbody/tr[3]/td[10]/select/option[3]")).click() //seleccionamos TAP
    }
    */
    await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[1]/h1/span[3]/button")),10000).click()

    await driver.wait(until.alertIsPresent());
    await sleep(2000)
    await driver.switchTo().alert().accept()    
    await sleep(2000)

    await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[2]/div[2]/div/section[2]/div/div[4]/span/button")),10000).click()
    await driver.wait(until.alertIsPresent());
    await sleep(2000)
    await driver.switchTo().alert().accept()    
    await sleep(2000)


    //const execSync_2 = require('child_process').execSync;
    //const output_2 = execSync_2("echo "+ jsonData.pass_host +" | sudo -S rm /usr/local/start", { encoding: 'utf-8' });      
    

    
} finally {
    await driver.quit();
  }
})();

