// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');

'use strict';

let jsonData = require('../constants.json');

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

(async function example() {

  var webVersion = "new"
  let driver = await new Builder().forBrowser('firefox').build();
  try {
    await driver.get("http://"+jsonData.user_admin+":"+jsonData.pass_admin+"@"+jsonData.ip+"/")
   
    await driver.wait(until.elementLocated(By.xpath(" /html/body/div/aside[1]/div/section/ul[2]/li[3]/a/span/b")),20000).click() //pulsamos advanced user
    await driver.wait(until.elementLocated(By.css("li.bigger:nth-child(3) > a:nth-child(1) > span:nth-child(2)")),20000).click() //pulsamos advanced network
    await driver.wait(until.elementLocated(By.xpath("/html/body/div/aside[1]/div/section/ul[2]/span/li[4]/a/span/b")),20000).click() //pulsamos port mirroring
    
    //await driver.wait(until.elementLocated(By.css("#table_general_egressPortMirroring_SWITCH > tbody:nth-child(1) > tr:nth-child(1) > td:nth-child(2) > input:nth-child(1)")),20000).click() //pulsamos enable egress port
   
    await driver.wait(until.elementLocated(By.css("#table_egressPortMirroring_SWITCH > tbody:nth-child(1) > tr:nth-child(2) > td:nth-child(4) > input:nth-child(1)")),20000).click() //pulsamos en el egress J1C mirror ports
    await driver.wait(until.elementLocated(By.css("#table_egressPortMirroring_SWITCH > tbody:nth-child(1) > tr:nth-child(3) > td:nth-child(3) > input:nth-child(1)")),20000).click() //pulsamos en el egress J1A monitored ports


    await driver.wait(until.elementLocated(By.xpath("/html/body/div/div[1]/section[1]/h1/span[3]/button")),20000).click() //pulsamos port mirroring

    

    await driver.wait(until.alertIsPresent());
    await sleep(2000)
    assert(await driver.switchTo().alert().getText() == "Changes successfully applied.")
    await driver.switchTo().alert().accept() 
    
    const execSync_2 = require('child_process').execSync;
    const output_2 = execSync_2("echo "+ jsonData.pass_host +" | sudo -S touch /usr/local/start", { encoding: 'utf-8' });  

} finally {
    await driver.quit();
  }
})();