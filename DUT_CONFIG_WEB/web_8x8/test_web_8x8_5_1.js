// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');

'use strict';

let jsonData = require('../constants.json');

console.log(jsonData);

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

(async function example() {

  var webVersion = "new"

  let driver = await new Builder().forBrowser('firefox').build();
  try {

    const ip_test = "192.168.2.51"
    const netmask_test = "255.255.255.0"
    const gateway_test = "192.168.2.1"
    const dns1_test = "8.8.8.8"
    const dns2_test = "8.8.4.4"
		
    await driver.get("http://"+jsonData.user_basic+":"+jsonData.pass_basic+"@"+jsonData.ip+"/")
    //await driver.get("http://192.168.137.14/")
    await driver.manage().window().setRect(1920, 926)

    
    await (await driver.wait(until.elementLocated(By.id("max_em")),20000)).click()

    if (webVersion=="new"){
      await (await driver.wait(until.elementLocated(By.id("ipv4Addr")),20000)).click()
      await driver.findElement(By.id("ipv4Addr")).clear()
      await driver.findElement(By.id("ipv4Addr")).sendKeys(ip_test)
  
      await (await driver.wait(until.elementLocated(By.id("netMask")),20000)).click()
      await driver.findElement(By.id("netMask")).clear()
      await driver.findElement(By.id("netMask")).sendKeys(netmask_test)
  
      await (await driver.wait(until.elementLocated(By.id("gateway")),20000)).click()
      await driver.findElement(By.id("gateway")).clear()
      await driver.findElement(By.id("gateway")).sendKeys(gateway_test)    
  
      await (await driver.wait(until.elementLocated(By.id("dns1")),20000)).click()
      await driver.findElement(By.id("dns1")).clear()
      await driver.findElement(By.id("dns1")).sendKeys(dns1_test)
  
      await (await driver.wait(until.elementLocated(By.id("dns2")),20000)).click()
      await driver.findElement(By.id("dns2")).clear()
      await driver.findElement(By.id("dns2")).sendKeys(dns2_test)    
  
      await driver.findElement(By.css("#where-right2 > button:nth-child(2)")).click()
      await driver.wait(until.alertIsPresent());
      await sleep(2000);
      assert(await driver.switchTo().alert().getText() == "Changes successfully applied.")
      await driver.switchTo().alert().accept()  

    } else {
      await (await driver.wait(until.elementLocated(By.id("ip_20")),2000)).click()
      await driver.findElement(By.id("ip_20")).clear()
      await driver.findElement(By.id("ip_20")).sendKeys("2")

      await (await driver.wait(until.elementLocated(By.id("ip_30")),2000)).click()
      await driver.findElement(By.id("ip_30")).clear()
      await driver.findElement(By.id("ip_30")).sendKeys("146")

      await (await driver.wait(until.elementLocated(By.id("gw_20")),2000)).click()
      await driver.findElement(By.id("gw_20")).clear()
      await driver.findElement(By.id("gw_20")).sendKeys("2")

      await (await driver.wait(until.elementLocated(By.id("dns1_00")),2000)).click()
      await driver.findElement(By.id("dns1_00")).clear()
      await driver.findElement(By.id("dns1_00")).sendKeys("8")

      await (await driver.wait(until.elementLocated(By.id("dns1_10")),2000)).click()
      await driver.findElement(By.id("dns1_10")).clear()
      await driver.findElement(By.id("dns1_10")).sendKeys("8")

      await (await driver.wait(until.elementLocated(By.id("dns1_20")),2000)).click()
      await driver.findElement(By.id("dns1_20")).clear()
      await driver.findElement(By.id("dns1_20")).sendKeys("8")

      await (await driver.wait(until.elementLocated(By.id("dns1_30")),2000)).click()
      await driver.findElement(By.id("dns1_30")).clear()
      await driver.findElement(By.id("dns1_30")).sendKeys("8")


      await driver.findElement(By.css(".btn-a:nth-child(2)")).click()
      await sleep(20000);
      assert(await driver.switchTo().alert().getText() == "Device needs to be rebooted to apply changes.\nClick \"Accept\" to reboot now or \"Cancel\" to reboot later.")
      await driver.switchTo().alert().accept()      
    }    



  } finally {
    await driver.quit();
  }
})();
/*
if (webVersion=="new"){
      
} else {
  
}
*/
