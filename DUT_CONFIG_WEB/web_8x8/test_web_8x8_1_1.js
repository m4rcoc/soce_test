// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver');
const assert = require('assert');

'use strict';

let jsonData = require('../constants.json');
console.log(jsonData);

function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

(async function example() {

  var webVersion = "new"
  let driver = await new Builder().forBrowser('firefox').build();
  try {
    await driver.get("http://"+jsonData.user_admin+":"+jsonData.pass_admin+"@"+jsonData.ip+"/")
    
    //await sleep(10000)
    
    await driver.wait(until.elementLocated(By.id('max_em')),10000)
    //await driver.wait(until.elementIsVisible(await driver.findElement(By.id("max_em"))), 10000)
    {
      const elements = await driver.findElements(By.id("max_em"))
      assert(elements.length)
    }
    assert(await driver.findElement(By.id("max_em")).getText() == "General Settings")
    {

      const elements = await driver.findElements(By.css(".bigger:nth-child(3) #max_em"))
      assert(elements.length)
    }
    
    assert(await driver.findElement(By.id("tr_model")).getText() == jsonData.model)
    {
     
      const elements = await driver.findElements(By.css(".bigger:nth-child(4) #max_em"))
      assert(elements.length)
    }
    assert(await driver.findElement(By.css(".bigger:nth-child(4) #max_em")).getText() == "Synchronization")
    
    await driver.wait(until.elementLocated(By.xpath("/html/body/div/header/nav/div/ul/li[1]/a")),2000).click()
    {
      //await (await driver.wait(until.elementLocated(By.xpath("//ul[@id='navbar_header']/li/a/i")),2000)).click()
      await sleep(2000)
     
      if (webVersion=="new"){
        const elements = await driver.findElements(By.xpath("//span[.='Logout']"))
        assert(elements.length)
      } else {
        const elements = await driver.findElements(By.id("tr_rx"))
        assert(elements.length)
      }
    }
   
    if (webVersion=="new"){
     
      
      assert(await driver.findElement(By.xpath("/html/body/div/aside[2]/div/div/ul[1]/li[2]/a/div/h3")).getText() == "Logout")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Configuration']"))
        assert(elements.length)
      }     
      assert(await driver.findElement(By.xpath("//span[.='Configuration']")).getText() == "Configuration")
      {
        const elements = await driver.findElements(By.xpath("//span[.='System']"))
        assert(elements.length)
      }   
      assert(await driver.findElement(By.xpath("//span[.='System']")).getText() == "System")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Downloads']"))
        assert(elements.length)
      } 
      assert(await driver.findElement(By.xpath("//span[.='Downloads']")).getText() == "Downloads")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Reboot']"))
        assert(elements.length)
      } 
      assert(await driver.findElement(By.xpath("//span[.='Reboot']")).getText() == "Reboot")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Security']"))
        assert(!elements.length)
      }   
    } else {
      assert(await driver.findElement(By.id("tr_rx")).getText() == "Logout")
      {
        const elements = await driver.findElements(By.id("tr_conf"))
        assert(elements.length)
      }   
      assert(await driver.findElement(By.id("tr_conf")).getText() == "Configuration")
      {
        const elements = await driver.findElements(By.id("tr_log"))
        assert(elements.length)
      }   
      assert(await driver.findElement(By.id("tr_log")).getText() == "System")
      {
        const elements = await driver.findElements(By.id("tr_rdl"))
        assert(elements.length)
      }   
      assert(await driver.findElement(By.id("tr_rdl")).getText() == "Downloads")
      {
        const elements = await driver.findElements(By.id("tr_re"))
        assert(elements.length)
      }  
      assert(await driver.findElement(By.id("tr_re")).getText() == "Reboot")
      {
        const elements = await driver.findElements(By.id("tr_rg"))
        assert(!elements.length)
      }                        
    }    
    await (await driver.wait(until.elementLocated(By.xpath("//ul[@id='navbar_header']/li/a/i")),2000)).click()
    await sleep(2000)
    {
      const elements = await driver.findElements(By.id("tr_rl"))
      assert(!elements.length)
    }
    {
      const elements = await driver.findElements(By.id("tr_rf"))
      assert(!elements.length)
    }
    {
      const elements = await driver.findElements(By.id("tr_rs"))
      assert(!elements.length)
    }
    {
      const elements = await driver.findElements(By.id("tr_certs"))
      assert(!elements.length)
    }
    await driver.findElement(By.css(".gear-right > a")).click()
    {
      const elements = await driver.findElements(By.id("tr_model"))
      assert(elements.length)
    }
   
    assert(await driver.findElement(By.id("tr_model")).getText() == jsonData.model)
    {
      const elements = await driver.findElements(By.id("tr_version"))
      assert(elements.length)
    }

    assert(await driver.findElement(By.id("tr_version")).getText() == jsonData.version)
    {
      const elements = await driver.findElements(By.id("logo"))
      assert(elements.length)
    }
    /*
    {
      const elements = await driver.findElements(By.id("schematic"))
      assert(elements.length)
    }
    */

    await driver.get("http://"+jsonData.user_admin+":"+jsonData.pass_admin+"@"+jsonData.ip+"/")

    await (await driver.wait(until.elementLocated(By.css(".core-a2")),4000)).click()
    
    await sleep(10000);
    //await driver.wait(until.elementIsVisible(await driver.findElement(By.css(".gear-right > a"))), 10000)

    //await driver.findElement(By.css(".gear-right > a")).click()

    await (await driver.wait(until.elementLocated(By.css(".gear-right > a")),4000)).click()
    {
      if (webVersion=="new"){
        const elements = await driver.findElements(By.xpath("//span[.='Security']"))
        assert(elements.length)       
        await sleep(10000)
      } else {
        const elements = await driver.findElements(By.id("tr_rg"))
        assert(elements.length)        
      }
    }

    if (webVersion=="new"){
      assert(await driver.findElement(By.xpath("//span[.='Security']")).getText() == "Security")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Logout']"))
        assert(elements.length)
      }
      assert(await driver.findElement(By.xpath("//span[.='Logout']")).getText() == "Logout")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Configuration']"))
        assert(elements.length)
      }  
      assert(await driver.findElement(By.xpath("//span[.='Configuration']")).getText() == "Configuration")
      {
        const elements = await driver.findElements(By.xpath("//span[.='System']"))
        assert(elements.length)
      }  
      assert(await driver.findElement(By.xpath("//span[.='System']")).getText() == "System")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Downloads']"))
        assert(elements.length)
      }             
    } else {
      assert(await driver.findElement(By.id("tr_rg")).getText() == "Account")
      {
        const elements = await driver.findElements(By.id("tr_rx"))
        assert(elements.length)
      }  
      assert(await driver.findElement(By.id("tr_rx")).getText() == "Logout")
      {
        const elements = await driver.findElements(By.id("tr_conf"))
        assert(elements.length)
      }  
      assert(await driver.findElement(By.id("tr_conf")).getText() == "Configuration")
      {
        const elements = await driver.findElements(By.id("tr_log"))
        assert(elements.length)
      }  
      assert(await driver.findElement(By.id("tr_log")).getText() == "System")
      {
        const elements = await driver.findElements(By.id("tr_rdl"))
        assert(elements.length)
      }                        
    }    
        

    if (webVersion=="new"){
      assert(await driver.findElement(By.xpath("//span[.='Downloads']")).getText() == "Downloads")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Firmware']"))
        assert(elements.length)
      }    
      assert(await driver.findElement(By.xpath("//span[.='Firmware']")).getText() == "Firmware")
      {
        const elements = await driver.findElements(By.xpath("//span[.='Reboot']"))
        assert(elements.length)
      }     
      assert(await driver.findElement(By.xpath("//span[.='Reboot']")).getText() == "Reboot")  

    } else {

      assert(await driver.findElement(By.id("tr_rdl")).getText() == "Downloads")
      {
        const elements = await driver.findElements(By.id("tr_rl"))
        assert(elements.length)
      }
      assert(await driver.findElement(By.id("tr_rl")).getText() == "Language")
      {
        const elements = await driver.findElements(By.id("tr_rf"))
        assert(elements.length)
      }
      assert(await driver.findElement(By.id("tr_rf")).getText() == "Firmware")
      {
        const elements = await driver.findElements(By.id("tr_rs"))
        assert(elements.length)
      }
      assert(await driver.findElement(By.id("tr_rs")).getText() == "Schematic")
      {
        const elements = await driver.findElements(By.id("tr_re"))
        assert(elements.length)
      }
  
      assert(await driver.findElement(By.id("tr_re")).getText() == "Reboot")    
    } 


    await driver.findElement(By.css(".gear-right > a")).click()
    
  } finally {
    await driver.quit();
  }
})();

/*
if (webVersion=="new"){
      
} else {
  
}
*/